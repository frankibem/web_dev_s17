{"version":3,"sources":["webpack:///webpack/bootstrap 026d37b9ba39ffb8a886","webpack:///./src/index.js","webpack:///./src/vendor/polyfill.js","webpack:///./src/pubnub.js","webpack:///./config.common.json","webpack:///./src/wrapper.js","webpack:///./src/v3/wrapper_pubnub_v3.js","webpack:///./src/v3/mock_v3.js","webpack:///./src/mock.js","webpack:///./src/v3/config.pubnub-v3.json","webpack:///./src/v4/wrapper_pubnub_v4.js","webpack:///./src/v4/mock_v4.js","webpack:///./src/v4/subscribe_events_broadcaster.js","webpack:///./src/v4/config.pubnub-v4.json","webpack:///./src/pubnub_channel.js","webpack:///./src/pubnub_channel_group.js"],"names":["require","Object","create","Temp","prototype","arguments","length","Error","TypeError","result","Array","map","callback","thisArg","T","A","k","O","len","kValue","mappedValue","call","commonConfig","Wrapper","WrapperPubNubV3","WrapperPubNubV4","angular","module","factory","$rootScope","PUBNUB","PubNub","service","instances","getPubNubVersion","init","initConfig","getInstance","default_instance_name","instanceName","instance","isDefined","getEventNameFor","methodName","callbackName","pubnub_prefix","join","getMessageEventNameFor","channelName","getPresenceEventNameFor","subscribe","args","config","exports","label","wrapperConfig","mockingInstance","pubnubInstance","methods_to_wrap","forEach","method","isObject","methodGroup","keys","methodList","m","wrapMethod","callbackFunction","methods_to_delegate","getOriginalInstance","ReferenceError","MockV3","configPubNubV3","callbacks","getCallbacksToMock","subscribe_callbacks_to_wrap","mockCallbacks","getLabel","common_callbacks_to_wrap","Mock","originalCallback","methodArguments","channel","channel_group","$broadcast","bind","concat","slice","isFunction","callbacksList","currentCallbackName","l","i","generateMockedVersionOfCallback","argsValue","initialCallbackNames","triggerEventsValue","triggerEvents","value","indexOf","push","MockV4","SubscribeEventsBroadcaster","configPubNubV4","subscribeEventsBroadcaster","eventsToBroadcast","subscribe_listener_events_to_broadcast","enableEventsBroadcast","undefined","eventName","wrapper","broadcastStatus","broadcastedChannels","broadcastedPresenceChannels","subscribeListener","self","addListener","message","subscription","apply","subscribedChannel","presence","presenceChannel","status","eventToBroadcast","channels","channelGroups","channelGroup","withPresence","initializeSubscribeListener","pubnubConfig","Pubnub","$q","PubnubChannel","autosubscribe","autostore","_channel","$messages","_timeTokenFirstMessage","_messagesAllFetched","_pubnubInstance","_autoload","autoload","_presence","_autosubscribe","_autostore","$$getPublicMethods","fn","key","_unsubscribeHandler","$load","eventsToTrigger","noheresync","$on","$$newMessage","numberOfMessages","deferred","defer","count","reverse","$$storeBatch","resolve","$digest","error","err","reject","response","startTimeToken","messages","item","entry","start","history","promise","$publish","_message","options","publish","$pubnubInstance","$channel","$allLoaded","$destroy","ngEvent","$$store","extend","unshift","iterator","context","$$getPrototypeMethods","charAt","methods","objProto","getPrototypeOf","proto","hasOwnProperty","$extend","ExtendedPubnubChannel","$pubnubChannel","PubnubChannelGroup","_config","channelExtension","_channelGroup","$channels","_extendedChannel","newChannel","$channelGroup","env"],"mappings":"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","file":"pubnub-angular.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 026d37b9ba39ffb8a886","require('./vendor/polyfill.js');\nrequire('./pubnub.js');\nrequire('./pubnub_channel.js');\nrequire('./pubnub_channel_group.js');\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/* eslint-disable */\n/* istanbul ignore next */\n// Object.create(proto[, propertiesObject])\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\nif (typeof Object.create !== 'function') {\n  Object.create = (function () {\n    let Temp = function () {};\n    return function (prototype) {\n      if (arguments.length > 1) {\n        throw new Error('Second argument not supported');\n      }\n      if (prototype !== Object(prototype) && prototype !== null) {\n        throw new TypeError('Argument must be an object or null');\n      }\n      if (prototype === null) {\n        throw Error('null [[Prototype]] not supported');\n      }\n      Temp.prototype = prototype;\n      let result = new Temp();\n      Temp.prototype = null;\n      return result;\n    };\n  })();\n}\n/* istanbul ignore next */\n// Production steps of ECMA-262, Edition 5, 15.4.4.19\n// Reference: http://es5.github.io/#x15.4.4.19\nif (!Array.prototype.map) {\n  Array.prototype.map = function(callback, thisArg) {\n    var T, A, k;\n    if (this == null) {\n      throw new TypeError(' this is null or not defined');\n    }\n    // 1. Let O be the result of calling ToObject passing the |this| \n    //    value as the argument.\n    var O = Object(this);\n    // 2. Let lenValue be the result of calling the Get internal \n    //    method of O with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = O.length >>> 0;\n    // 4. If IsCallable(callback) is false, throw a TypeError exception.\n    // See: http://es5.github.com/#x9.11\n    if (typeof callback !== 'function') {\n      throw new TypeError(callback + ' is not a function');\n    }\n    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    if (arguments.length > 1) {\n      T = thisArg;\n    }\n    // 6. Let A be a new array created as if by the expression new Array(len) \n    //    where Array is the standard built-in constructor with that name and \n    //    len is the value of len.\n    A = new Array(len);\n    // 7. Let k be 0\n    k = 0;\n    // 8. Repeat, while k < len\n    while (k < len) {\n      var kValue, mappedValue;\n      // a. Let Pk be ToString(k).\n      //   This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the HasProperty internal \n      //    method of O with argument Pk.\n      //   This step can be combined with c\n      // c. If kPresent is true, then\n      if (k in O) {\n        // i. Let kValue be the result of calling the Get internal \n        //    method of O with argument Pk.\n        kValue = O[k];\n        // ii. Let mappedValue be the result of calling the Call internal \n        //     method of callback with T as the this value and argument \n        //     list containing kValue, k, and O.\n        mappedValue = callback.call(T, kValue, k, O);\n        // iii. Call the DefineOwnProperty internal method of A with arguments\n        // Pk, Property Descriptor\n        // { Value: mappedValue,\n        //   Writable: true,\n        //   Enumerable: true,\n        //   Configurable: true },\n        // and false.\n        // In browsers that support Object.defineProperty, use the following:\n        // Object.defineProperty(A, k, {\n        //   value: mappedValue,\n        //   writable: true,\n        //   enumerable: true,\n        //   configurable: true\n        // });\n        // For best browser support, use the following:\n        A[k] = mappedValue;\n      }\n      // d. Increase k by 1.\n      k++;\n    }\n    // 9. return A\n    return A;\n  };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/vendor/polyfill.js","/* global angular PUBNUB */\n/* global angular PubNub */\n\nconst commonConfig = require('../config.common.json');\n\nlet Wrapper = require('./wrapper.js');\nlet WrapperPubNubV3 = require('./v3/wrapper_pubnub_v3.js');\nlet WrapperPubNubV4 = require('./v4/wrapper_pubnub_v4.js');\n\nangular.module('pubnub.angular.service', [])\n  .factory('Pubnub', ['$rootScope', function ($rootScope) {\n    if (typeof PUBNUB === 'undefined' && typeof PubNub === 'undefined') {\n      throw new Error('PUBNUB is not in global scope. Ensure that pubnub.js file is included before pubnub-angular.js');\n    }\n\n    let service = {};\n    let instances = {};\n    /**\n     * Return the version of PubNub used by the PubNub service.\n     *\n     * @param {Object} initConfig\n     */\n    service.getPubNubVersion = function () {\n      return (typeof PUBNUB === 'undefined') ? '4' : '3';\n    };\n\n    /**\n     * Initializer for default instance\n     *\n     * @param {Object} initConfig\n     */\n    service.init = function (initConfig) {\n      return service.getInstance(commonConfig.default_instance_name).init(initConfig);\n    };\n\n    /**\n     * Instance getter\n     *\n     * @param instanceName\n     * @returns {Wrapper}\n     */\n    service.getInstance = function (instanceName) {\n      let instance = instances[instanceName];\n\n      if (angular.isDefined(instance) && instance instanceof Wrapper) {\n        return instance;\n      } else if (typeof instanceName === 'string' && instanceName.length > 0) {\n        if (this.getPubNubVersion() === '3') {\n          instances[instanceName] = new WrapperPubNubV3(instanceName, service, $rootScope);\n        } else if (this.getPubNubVersion() === '4') {\n          instances[instanceName] = new WrapperPubNubV4(instanceName, service, $rootScope);\n        }\n\n        return instances[instanceName];\n      }\n\n      return instance;\n    };\n\n    /**\n     * Generate unique method/callback event name\n     *\n     * @param {string} methodName\n     * @param {string} callbackName\n     * @param {string} instanceName\n     * @returns {string} event name\n     */\n    service.getEventNameFor = function (methodName, callbackName, instanceName = commonConfig.default_instance_name) {\n      return [commonConfig.pubnub_prefix, instanceName, methodName, callbackName].join(':');\n    };\n\n    /**\n     * Generate unique message event name for specified channel\n     *\n     * @param {string} channelName\n     * @param {string} instanceName\n     * @returns {string} event name\n     */\n    service.getMessageEventNameFor = function (channelName, instanceName = commonConfig.default_instance_name) {\n      return [commonConfig.pubnub_prefix, instanceName, 'subscribe', 'callback', channelName].join(':');\n    };\n\n    /**\n     * Generate unique presence event name for specified channel\n     *\n     * @param {string} channelName\n     * @param {string} instanceName\n     * @returns {string} event name\n     */\n    service.getPresenceEventNameFor = function (channelName, instanceName = commonConfig.default_instance_name) {\n      return [commonConfig.pubnub_prefix, instanceName, 'subscribe', 'presence', channelName].join(':');\n    };\n\n    /**\n     * Subscribe method wrapper for default instance\n     *\n     * @param {object} args\n     */\n    service.subscribe = function (args) {\n      this.getInstance(commonConfig.default_instance_name).subscribe(args);\n    };\n\n    return service;\n  }]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/pubnub.js","module.exports = {\n\t\"pubnub_prefix\": \"pubnub\",\n\t\"default_instance_name\": \"default\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./config.common.json\n// module id = 3\n// module chunks = 0","/* global angular */\n/* eslint no-param-reassign: 0 */\nconst config = require('../config.common.json');\n\nmodule.exports = class {\n  /**\n  * Constructor\n  * The constructor is called through this way $pubnubChannel(channelName, options) and shoudld rarely called directely\n  * @param {String} label: instance name\n  * @param {Hash} service: PubNub Angular service composed of functions\n  * @param {$rootScope} $rootScope : the $rootScope of the PubNub Angular service\n  * @param {Hash} $rootScope : the $rootScope of the PubNub Angular service\n  * @constructor\n  */\n  constructor(label, service, $rootScope, wrapperConfig) {\n    this.label = label;\n    this.mockingInstance = null;\n    this.pubnubInstance = null;\n    // Register the methods in the wrapper and replace callbacks by mocked callbacks if needed\n    wrapperConfig.methods_to_wrap.forEach((method) => {\n      if (angular.isObject(method)) {\n        let methodGroup = Object.keys(method)[0];\n        let methodList = method[methodGroup];\n        this[methodGroup] = {};\n        service[methodGroup] = {};\n        methodList.forEach((m) => {\n          this.wrapMethod(m, methodGroup);\n          service[methodGroup][m] = function (args, callbackFunction) {\n            return service.getInstance(config.default_instance_name)[methodGroup][m](args, callbackFunction);\n          };\n        });\n      } else {\n        this.wrapMethod(method);\n        // Add the wrapped method to the service\n        service[method] = function (args, callbackFunction) {\n          return service.getInstance(config.default_instance_name)[method](args, callbackFunction);\n        };\n      }\n    });\n\n    // Just delegate the methods to the wrapper\n    wrapperConfig.methods_to_delegate.forEach((method) => {\n      this[method] = args => this.getOriginalInstance()[method](args);\n      // Add the delegated method to the service\n      service[method] = function (args) {\n        return this.getInstance(config.default_instance_name)[method](args);\n      };\n    });\n  }\n\n  /**\n  * This method returns the label of the wrapper which is the name of the instance.\n  **/\n  getLabel() {\n    return this.label;\n  }\n\n  /**\n  * This method returns the original PubNub instance associated with this wrapper\n  **/\n  getOriginalInstance() {\n    if (this.pubnubInstance) {\n      return this.pubnubInstance;\n    } else {\n      throw new ReferenceError('Pubnub default instance is not initialized yet. Invoke #init() method first.');\n    }\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/wrapper.js","/* global angular PUBNUB */\n\nlet Wrapper = require('../wrapper.js');\nlet MockV3 = require('./mock_v3.js');\nconst configPubNubV3 = require('./config.pubnub-v3.json');\n\nmodule.exports = class extends Wrapper {\n\n  constructor(label, service, $rootScope) {\n    super(label, service, $rootScope, configPubNubV3);\n    this.mockingInstance = new MockV3(label, service, $rootScope);\n  }\n\n  init(initConfig) {\n    this.pubnubInstance = new PUBNUB(initConfig);\n  }\n\n  subscribe(args) {\n    let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV3.subscribe_callbacks_to_wrap);\n    this.mockingInstance.mockCallbacks(this.getLabel(), 'subscribe', args, callbacks);\n    this.getOriginalInstance().subscribe(args);\n  }\n\n  /**\n  * This method add to the Wrapper the original PubNub method overrided with event broadcast if needed.\n  **/\n  wrapMethod(methodName) {\n    this[methodName] = (args) => {\n      if (angular.isObject(args)) {\n        let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV3.common_callbacks_to_wrap);\n        this.mockingInstance.mockCallbacks(this.getLabel(), methodName, args, callbacks);\n      }\n\n      return this.getOriginalInstance()[methodName](args);\n    };\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/v3/wrapper_pubnub_v3.js","/* global angular */\n/* eslint no-param-reassign: 0 */\nlet Mock = require('../mock');\n\nmodule.exports = class extends Mock {\n\n  /**\n   * Returns a mocked version of the given callback broadcasting the callback through\n   * the AngularJS event broadcasting mechanism.\n   *\n   * @param {function} originalCallback\n   * @param {string} callbackName\n   * @param {string} methodName\n   * @param {string} instanceName\n   * @param {string} methodArguments: the arguments of the method that setup the callback\n   * @return {Function} mocked callback function broadcasting angular events on the rootScope\n   */\n\n  generateMockedVersionOfCallback(originalCallback, callbackName, methodName, instanceName, methodArguments) {\n    let $rootScope = this.$rootScope;\n    let service = this.service;\n    const channelName = methodArguments.channel || methodArguments.channel_group;\n\n    return function () {\n      // Broadcast through the generic event name\n      $rootScope.$broadcast.bind(...[$rootScope, service.getEventNameFor(methodName, callbackName, instanceName)]\n                                    .concat(Array.prototype.slice.call(arguments))\n                                )();\n\n        // Call the original callback\n      if (callbackName && angular.isFunction(originalCallback)) {\n        originalCallback(...arguments);\n      }\n\n        // Broadcast through the message event or presence event\n      if (methodName === 'subscribe') {\n        switch (callbackName) {\n          case 'callback':\n            $rootScope.$broadcast.bind(...[$rootScope, service.getMessageEventNameFor(channelName, instanceName)]\n                                          .concat(Array.prototype.slice.call(arguments))\n                                      )();\n            break;\n          case 'presence':\n            $rootScope.$broadcast.bind(...[$rootScope, service.getPresenceEventNameFor(channelName, instanceName)]\n                                          .concat(Array.prototype.slice.call(arguments))\n                                       )();\n            break;\n          default:\n            break;\n        }\n      }\n    };\n  }\n\n  /**\n   * Mock passed in callbacks with callback-wrappers to invoke both original callbacks and angular events\n   *\n   * This method is replacing from the list of arguments {{args}} the callbacks functions\n   * allowed and enabled to be mocked provided by the {{callbackList}} by new callbacks functions\n   * including the Angular event broadcasting\n   *\n   * @param {string} instanceName\n   * @param {string} methodName\n   * @param {Object} methodArguments : argument list of the function\n   * @param {Array} callbacksList : list of callbacks functions to be mocked\n   */\n  mockCallbacks(instanceName, methodName, methodArguments, callbacksList) {\n    let originalCallback;\n    let currentCallbackName;\n\n    let l = callbacksList.length;\n    let i;\n\n    // Replace each callbacks allowed to be mocked.\n    for (i = 0; i < l; i += 1) {\n      if (!angular.isObject(methodArguments)) {\n        return;\n      }\n\n      currentCallbackName = callbacksList[i];\n      originalCallback = methodArguments[currentCallbackName];\n\n      // We replace the original callback with a mocked version.\n      methodArguments[currentCallbackName] = this.generateMockedVersionOfCallback(originalCallback, currentCallbackName, methodName, instanceName, methodArguments);\n    }\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/v3/mock_v3.js","/* global angular */\nmodule.exports = class {\n\n  constructor(label, service, $rootScope) {\n    this.label = label;\n    this.$rootScope = $rootScope;\n    this.service = service;\n  }\n\n  /**\n   * Return the list of callbacks names allowed and enabled to be mocked.\n   *\n   * This methods given a list of callbacks names {{initialCallbackNames}} and the argument list\n   * of the function {{argsValue}} will return the list of callbacks names that can be mocked.\n   * This method is usefull for the {{mockCallbacks}} method in order to know which callback functions to mock.\n   *\n   * @param {Object} argsValue from method call\n   * @param {Array} initialCallbackNames from config object\n   * @returns {Array} of callbacks to mock\n   */\n  getCallbacksToMock(argsValue, initialCallbackNames) {\n    let triggerEventsValue = argsValue.triggerEvents;\n    let result = [];\n    let length;\n    let value;\n    let i;\n\n    if (triggerEventsValue === true) {\n      return initialCallbackNames;\n    } else if (angular.isObject(triggerEventsValue)) {\n      length = triggerEventsValue.length;\n\n      for (i = 0; i < length; i += 1) {\n        value = triggerEventsValue[i];\n        if (initialCallbackNames.indexOf(value) >= 0) result.push(value);\n      }\n\n      return result;\n    } else {\n      return [];\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/mock.js","module.exports = {\n\t\"methods_to_delegate\": [\n\t\t\"replay\",\n\t\t\"unsubscribe\",\n\t\t\"revoke\",\n\t\t\"audit\",\n\t\t\"time\",\n\t\t\"channel_group\",\n\t\t\"channel_group_list_groups\",\n\t\t\"channel_group_list_namespaces\",\n\t\t\"channel_group_remove_namespace\",\n\t\t\"channel_group_cloak\",\n\t\t\"get_subscribed_channels\",\n\t\t\"set_uuid\",\n\t\t\"get_uuid\",\n\t\t\"auth\",\n\t\t\"set_cipher_key\",\n\t\t\"get_cipher_key\",\n\t\t\"raw_encrypt\",\n\t\t\"raw_decrypt\",\n\t\t\"set_heartbeat\",\n\t\t\"get_heartbeat\",\n\t\t\"set_heartbeat_interval\",\n\t\t\"get_heartbeat_interval\"\n\t],\n\t\"methods_to_wrap\": [\n\t\t\"here_now\",\n\t\t\"history\",\n\t\t\"publish\",\n\t\t\"fire\",\n\t\t\"here_now\",\n\t\t\"where_now\",\n\t\t\"state\",\n\t\t\"grant\",\n\t\t\"revoke\",\n\t\t\"channel_group_add_channel\",\n\t\t\"channel_group_list_channels\",\n\t\t\"channel_group_remove_channel\",\n\t\t\"channel_group_remove_group\",\n\t\t\"mobile_gw_provision\"\n\t],\n\t\"subscribe_callbacks_to_wrap\": [\n\t\t\"callback\",\n\t\t\"connect\",\n\t\t\"reconnect\",\n\t\t\"disconnect\",\n\t\t\"error\",\n\t\t\"idle\",\n\t\t\"presence\"\n\t],\n\t\"common_callbacks_to_wrap\": [\n\t\t\"callback\",\n\t\t\"error\"\n\t]\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/v3/config.pubnub-v3.json\n// module id = 8\n// module chunks = 0","/* global angular PubNub */\n/* eslint no-param-reassign: 0 */\n\nlet Wrapper = require('../wrapper.js');\nlet MockV4 = require('./mock_v4.js');\nlet SubscribeEventsBroadcaster = require('./subscribe_events_broadcaster.js');\nconst configPubNubV4 = require('./config.pubnub-v4.json');\n\n\nmodule.exports = class extends Wrapper {\n\n  constructor(label, service, $rootScope) {\n    super(label, service, $rootScope, configPubNubV4);\n    this.mockingInstance = new MockV4(label, service, $rootScope);\n    this.subscribeEventsBroadcaster = new SubscribeEventsBroadcaster(label, service, $rootScope, this);\n  }\n\n  init(initConfig) {\n    this.pubnubInstance = new PubNub(initConfig);\n  }\n\n  subscribe(args) {\n    // Events to trigger [message, presence, status]\n    let eventsToBroadcast = this.mockingInstance.getCallbacksToMock(args, configPubNubV4.subscribe_listener_events_to_broadcast);\n    this.subscribeEventsBroadcaster.enableEventsBroadcast(eventsToBroadcast, args);\n    this.getOriginalInstance().subscribe(args);\n  }\n\n  /**\n  * This method add to the Wrapper the original PubNub method overrided with event broadcast if needed.\n  **/\n  wrapMethod(methodName, methodGroup) {\n    if (methodGroup !== undefined) {\n      this[methodGroup][methodName] = (args, callbackFunction) => {\n        if (angular.isObject(args)) {\n          let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV4.common_callbacks_to_wrap);\n          // Mock the callback to trigger events\n          if (callbacks.length > 0) {\n            let eventName = `${methodGroup}.${methodName}`;\n            callbackFunction = this.mockingInstance.generateMockedVersionOfCallback(callbackFunction, 'callback', eventName, this.getLabel());\n          }\n        }\n        return this.getOriginalInstance()[methodGroup][methodName](args, callbackFunction);\n      };\n    } else {\n      this[methodName] = (args, callbackFunction) => {\n        if (angular.isObject(args)) {\n          let callbacks = this.mockingInstance.getCallbacksToMock(args, configPubNubV4.common_callbacks_to_wrap);\n          // Mock the callback to trigger events\n          if (callbacks.length > 0) {\n            callbackFunction = this.mockingInstance.generateMockedVersionOfCallback(callbackFunction, 'callback', methodName, this.getLabel());\n          }\n        }\n        return this.getOriginalInstance()[methodName](args, callbackFunction);\n      };\n    }\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/v4/wrapper_pubnub_v4.js","/* global angular */\nlet Mock = require('../mock.js');\n\nmodule.exports = class extends Mock {\n\n  /**\n   * Returns a mocked version of the given callback broadcasting the callback through\n   * the AngularJS event broadcasting mechanism.\n   *\n   * @param {function} originalCallback\n   * @param {string} callbackName\n   * @param {string} methodName\n   * @param {string} instanceName\n   * @return {Function} mocked callback function broadcasting angular events on the rootScope\n   */\n\n  generateMockedVersionOfCallback(originalCallback, callbackName, methodName, instanceName) {\n    let $rootScope = this.$rootScope;\n    let service = this.service;\n\n    return function () {\n      // Broadcast through the generic event name\n      $rootScope.$broadcast.bind(...[$rootScope, service.getEventNameFor(methodName, callbackName, instanceName)]\n                                    .concat(Array.prototype.slice.call(arguments))\n                                 )();\n\n      // Call the original callback\n      if (callbackName && angular.isFunction(originalCallback)) {\n        originalCallback(...arguments);\n      }\n    };\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/v4/mock_v4.js","/* global angular */\n/* eslint prefer-spread: 0 */\n\nmodule.exports = class {\n\n  constructor(label, service, $rootScope, wrapper) {\n    this.wrapper = wrapper;\n    this.label = label;\n    this.$rootScope = $rootScope;\n    this.service = service;\n    this.broadcastStatus = false;\n    this.broadcastedChannels = {};\n    this.broadcastedPresenceChannels = {};\n    this.subscribeListener = null;\n  }\n\n  initializeSubscribeListener() {\n    let $rootScope = this.$rootScope;\n    let service = this.service;\n    let self = this;\n    this.subscribeListener = this.service.getInstance(this.label).addListener({\n      message(m) {\n        if ((m.subscription && self.broadcastedChannels[m.subscription]) ||\n             (m.channel && self.broadcastedChannels[m.channel])) {\n          $rootScope.$broadcast.bind.apply(\n                   $rootScope.$broadcast,\n                   [$rootScope, service.getMessageEventNameFor(m.subscribedChannel, self.label)]\n                     .concat(Array.prototype.slice.call(arguments))\n                 )();\n        }\n      },\n      presence(m) {\n        let presenceChannel = null;\n        // If from channel group\n        if (m.subscription !== null && self.broadcastedPresenceChannels[m.subscription]) {\n          presenceChannel = m.subscription;\n        } else if (m.channel !== null && self.broadcastedPresenceChannels[m.channel]) {\n          presenceChannel = m.channel;\n        }\n\n        if (presenceChannel !== null) {\n          $rootScope.$broadcast.bind.apply(\n                   $rootScope.$broadcast,\n                   [$rootScope, service.getPresenceEventNameFor(presenceChannel, self.label)]\n                     .concat(Array.prototype.slice.call(arguments))\n                 )();\n        }\n      },\n      status() {\n        if (self.broadcastStatus) {\n          let eventName = self.service.getEventNameFor('subscribe', 'status', self.label);\n          self.$rootScope.$broadcast.bind.apply(\n               self.$rootScope.$broadcast,\n               [self.$rootScope, eventName]\n                 .concat(Array.prototype.slice.call(arguments))\n             )();\n        }\n      }\n    });\n  }\n\n  enableEventsBroadcast(eventsToBroadcast, args) {\n    eventsToBroadcast.forEach((eventToBroadcast) => {\n      if (eventToBroadcast === 'status') {\n        this.broadcastStatus = true;\n      }\n      if (eventToBroadcast === 'message') {\n        // Adds any message channel which are not presence channels\n        if (args.channels && args.channels.length > 0) {\n          args.channels.forEach((channel) => {\n            if (channel.slice(-7) !== '-pnpres') {\n              this.broadcastedChannels[channel] = true;\n            }\n          });\n        }\n        // Adds any message channel group which are not presence channels\n        if (args.channelGroups && args.channelGroups.length > 0) {\n          args.channelGroups.forEach((channelGroup) => {\n            if (channelGroup.slice(-7) !== '-pnpres') {\n              this.broadcastedChannels[channelGroup] = true;\n            }\n          });\n        }\n      }\n      if (eventToBroadcast === 'presence') {\n        // Adds the presence channels of the current channels\n        if (args.withPresence) {\n          if (args.channels && args.channels.length > 0) {\n            args.channels.forEach(channel => (this.broadcastedPresenceChannels[channel] = true));\n          }\n          if (args.channelGroups && args.channelGroups) {\n            args.channelGroups.forEach(channelGroup => (this.broadcastedPresenceChannels[channelGroup] = true));\n          }\n        // Add the presence channels that have been subscribed directely\n        } else {\n          if (args.channels && args.channels.length > 0) {\n            args.channels.forEach((channel) => {\n              if (channel.slice(-7) === '-pnpres') {\n                this.broadcastedPresenceChannels[channel.slice(0, -7)] = true;\n              }\n            });\n          }\n          if (args.channelGroups && args.channelGroups) {\n            args.channelGroups.forEach((channelGroup) => {\n              if (channelGroup.slice(-7) === '-pnpres') {\n                this.broadcastedPresenceChannels[channelGroup.slice(0, -7)] = true;\n              }\n            });\n          }\n        }\n      }\n    });\n    if (this.subscribeListener === null) {\n      this.initializeSubscribeListener();\n    }\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/v4/subscribe_events_broadcaster.js","module.exports = {\n\t\"methods_to_delegate\": [\n\t\t\"setUUID\",\n\t\t\"getUUID\",\n\t\t\"setAuthKey\",\n\t\t\"addListener\",\n\t\t\"removeListener\",\n\t\t\"unsubscribe\",\n\t\t\"unsubscribeAll\",\n\t\t\"time\",\n\t\t\"stop\",\n\t\t\"encrypt\",\n\t\t\"decrypt\",\n\t\t\"setFilterExpression\"\n\t],\n\t\"methods_to_wrap\": [\n\t\t\"publish\",\n\t\t\"fire\",\n\t\t\"hereNow\",\n\t\t\"whereNow\",\n\t\t\"setState\",\n\t\t\"getState\",\n\t\t\"grant\",\n\t\t\"history\",\n\t\t{\n\t\t\t\"push\": [\n\t\t\t\t\"addChannels\",\n\t\t\t\t\"deleteDevice\",\n\t\t\t\t\"listChannels\",\n\t\t\t\t\"removeChannels\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"channelGroups\": [\n\t\t\t\t\"addChannels\",\n\t\t\t\t\"deleteGroup\",\n\t\t\t\t\"listChannels\",\n\t\t\t\t\"listGroups\",\n\t\t\t\t\"removeChannels\"\n\t\t\t]\n\t\t}\n\t],\n\t\"common_callbacks_to_wrap\": [\n\t\t\"callback\"\n\t],\n\t\"subscribe_listener_events_to_broadcast\": [\n\t\t\"message\",\n\t\t\"presence\",\n\t\t\"status\"\n\t]\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/v4/config.pubnub-v4.json\n// module id = 12\n// module chunks = 0","const pubnubConfig = require('../config.common.json');\n/* global angular */\nangular.module('pubnub.angular.service').factory('$pubnubChannel', ['$rootScope', 'Pubnub', '$q', function ($rootScope, Pubnub, $q) {\n  /**\n  * Constructor\n  * The constructor is called through this way $pubnubChannel(channelName, options) and shoudld rarely called directely\n  * Optionnal parameters available to pass in the options hash:\n  * {\n  *    instance: 'deluxeInstance',  // The instance that will be used, default: {default PubNub instance}\n  *    autoload: 50,                // The number of messages we want to autoload from history, default: none\n  *    autosubscribe: true,         // Automatically subscribe to the channel, default: true\n  *    presence: false              // If autosubscribe enabled, subscribe and trigger the presence events, default: false\n  *    autostore: true              // Automatically store the messages received, default: true\n  *\n  * }\n  * @param {String} channel\n  * @param {Hash} config\n  * @returns {Array}\n  * @constructor\n  */\n  function PubnubChannel(channel, config = {}) {\n        // Instanciate the PubnubChannel and return it\n    if (!(this instanceof PubnubChannel)) {\n      return new PubnubChannel(channel, config);\n    }\n\n    if (!channel) {\n      throw new Error('The channel name is required');\n    }\n        // autosubscribe\n    if (config.autosubscribe && !(typeof config.autosubscribe === 'boolean')) {\n      throw new Error('The autosubscribe parameter should be a boolean');\n    }\n        // presence\n    if (config.presence && !(typeof config.presence === 'boolean')) {\n      throw new Error('The presence parameter should be a boolean');\n    }\n        // autostore\n    if (config.autostore && !(typeof config.autostore === 'boolean')) {\n      throw new Error('The autostore parameter should be a boolean');\n    }\n\n    let self = this;\n    // The channel we get data from\n    this._channel = channel;\n    // List that will store the messages received from the channel\n    this.$messages = [];\n    // Timetoken of the first message of the list\n    // usefull for knowing from where to fetch the list history from\n    this._timeTokenFirstMessage = null;\n    // Indicates if all the messages have been fetched from PubNub history\n    this._messagesAllFetched = false;\n    // PubNub Instance that will be used by this PubNub channel\n    this._pubnubInstance = config.instance ? Pubnub.getInstance(config.instance) : Pubnub.getInstance(pubnubConfig.default_instance_name);\n    // Number of messages (between 0 and 100) to autoload in this array calling PubNub history\n    this._autoload = config.autoload == null ? 0 : config.autoload;\n    // Subscribe and trigger the presence events\n    this._presence = config.presence == null ? false : config.presence;\n    // Indicates if it should automatically subscribe to the PubNub channel, default: true\n    this._autosubscribe = config.autosubscribe == null ? true : config.autosubscribe;\n    // Indicates if it should store automatically the messages received from PubNub\n    this._autostore = config.autostore == null ? true : config.autostore;\n\n    // Bind the public methods to make them available on the array.\n    this.$$getPublicMethods((fn, key) => {\n      self.$messages[key] = fn.bind(self);\n    });\n\n    // The handler that allow to stop listening to new messages\n    this._unsubscribeHandler = null;\n\n    // Autoload the messages\n    if (this._autoload !== 0) {\n      this.$load(this._autoload);\n    }\n\n    let eventsToTrigger = null;\n\n    if (Pubnub.getPubNubVersion() === '3') {\n      eventsToTrigger = ['callback', 'connect', 'reconnect', 'disconnect', 'error', 'idle'];\n    } else {\n      eventsToTrigger = ['status', 'message'];\n    }\n\n    // Trigger the presence event?\n    if (this._presence) {\n      eventsToTrigger.push('presence');\n    }\n\n    // Automatically subscribe to the channel\n    if (this._autosubscribe) {\n      // Automatically subscribe to the channel\n      let args = { triggerEvents: eventsToTrigger };\n      if (Pubnub.getPubNubVersion() === '3') {\n        args.channel = this._channel;\n        args.noheresync = true;\n      } else {\n        args.channels = [this._channel];\n        if (this._presence) {\n          args.withPresence = true;\n        }\n      }\n\n      this._pubnubInstance.subscribe(args);\n    }\n\n    // Automatically store the messages\n    if (this._autostore) {\n      let eventName = Pubnub.getMessageEventNameFor(self._channel, this._pubnubInstance.label);\n      this._unsubscribeHandler = $rootScope.$on(eventName, self.$$newMessage.bind(self));\n    }\n\n    return this.$messages;\n  }\n\n  PubnubChannel.prototype = {\n    /**\n    *   Fetch and load the previous messages in the $messages array\n    *   @param {Integer} numberOfMessages : number of messages we want to load.\n    *   @returns {Promise} messages loaded or error\n    */\n    $load(numberOfMessages) {\n      if (!(numberOfMessages > 0 && numberOfMessages <= 100)) {\n        throw new Error('The number of messages to load should be a number between 0 and 100');\n      }\n\n      let self = this;\n      let deferred = $q.defer();\n\n      let args = {\n        channel: self._channel,\n        count: numberOfMessages,\n        reverse: false\n      };\n\n      let callback = null;\n\n      if (Pubnub.getPubNubVersion() === '3') {\n        args.callback = function (m) {\n          // Update the timetoken of the first message\n          self._timeTokenFirstMessage = m[1];\n\n          self.$$storeBatch(m[0]);\n\n          // Updates the indicator that all messages have been fetched.\n          if (m[0].length < numberOfMessages) {\n            self._messagesAllFetched = true;\n          }\n\n          deferred.resolve(m);\n          $rootScope.$digest();\n        };\n        args.error = function (err) {\n          deferred.reject(err);\n        };\n      } else {\n        callback = function (status, response) {\n          if (status.error) {\n            deferred.reject(response);\n          } else {\n            // Update the timetoken of the first message\n            self._timeTokenFirstMessage = response.startTimeToken;\n\n            self.$$storeBatch(response.messages.map(item => item.entry));\n\n            // Updates the indicator that all messages have been fetched.\n            if (response.messages.length < numberOfMessages) {\n              self._messagesAllFetched = true;\n            }\n\n            deferred.resolve(response);\n            $rootScope.$digest();\n          }\n        };\n      }\n\n      // If there is already messages in the array and consequently a first message timetoken\n      if (self._timeTokenFirstMessage) {\n        args.start = self._timeTokenFirstMessage;\n      }\n\n      self._pubnubInstance.history(args, callback);\n      return deferred.promise;\n    },\n\n    /**\n    * Publish a message in the channel\n    * @param {Hash} message : message we want to send\n    * @returns {Promise} messages loaded or error\n    */\n    $publish(_message) {\n      let self = this;\n      let deferred = $q.defer();\n      let options = {\n        channel: self._channel,\n        message: _message\n      };\n\n      let callback = null;\n\n      if (Pubnub.getPubNubVersion() === '3') {\n        options.callback = (m) => { deferred.resolve(m); };\n        options.error = (err) => { deferred.reject(err); };\n      } else {\n        callback = (status, response) => {\n          if (status.error) {\n            deferred.reject(response);\n          } else {\n            deferred.resolve(response);\n          }\n        };\n      }\n\n      self._pubnubInstance.publish(options, callback);\n      return deferred.promise;\n    },\n\n    /**\n    * Return the Pubnub instance associated to this PubNub Channel\n    * @returns {Pubnub} the Pubnub instance\n    */\n    $pubnubInstance() {\n      return this._pubnubInstance;\n    },\n\n    /**\n    * Return the channel name on which this PubnubChannel\n    * @returns {String} the channel name\n    */\n    $channel() {\n      return this._channel;\n    },\n\n    /**\n    * Indicates if all the messages have been fetched\n    * @returns {Boolean} all the messages have been loaded\n    */\n    $allLoaded() {\n      return this._messagesAllFetched;\n    },\n\n    /**\n    * Inform the object to not receive the events anymore\n    * and and clears memory being used by this array\n    */\n    $destroy() {\n      if (this._unsubscribeHandler) {\n        this._unsubscribeHandler();\n      }\n      this.$messages.length = 0;\n    },\n\n    /**\n    * Called when an new message has been received in the channel from the PubNub network\n    * @protected\n    */\n    $$newMessage(ngEvent, m) {\n      if (Pubnub.getPubNubVersion() === '3') {\n        this.$$store(m);\n      } else {\n        this.$$store(m.message);\n      }\n      $rootScope.$digest();\n    },\n\n    /**\n    * Function called to store a message in the messages array.\n    * @protected\n    */\n    $$store(message) {\n      this.$messages.push(message);\n    },\n\n    /**\n    * Function called in order to store a batch of message in the messages array.\n    * @protected\n    */\n    $$storeBatch(messages) {\n      // We add the messages in the array\n      if (this.$messages.length === 0) {\n        angular.extend(this.$messages, messages);\n      } else {\n        Array.prototype.unshift.apply(this.$messages, messages);\n      }\n    },\n\n    /**\n    * These methods allow the PubNub channel to extend his array with his Public methods\n    */\n\n    // Get the list of the public methods of the PubnubChannel (prefixed by $)\n    // Return the list of the public methods of the prototype\n    $$getPublicMethods(iterator, context) {\n      this.$$getPrototypeMethods((m, k) => {\n        if (typeof (m) === 'function' && k.charAt(0) !== '_') {\n          iterator.call(context, m, k);\n        }\n      });\n    },\n\n    // Get the list of the methods of the PubnubChannel\n    // Return the list of the methods of the prototype\n    $$getPrototypeMethods(iterator, context) {\n      let methods = {};\n      let objProto = Object.getPrototypeOf({});\n      let proto = angular.isFunction(this) && angular.isObject(this.prototype) ?\n          this.prototype : Object.getPrototypeOf(this);\n      while (proto && proto !== objProto) {\n        Object.keys(proto).forEach((key) => {\n          if ({}.hasOwnProperty.call(proto, key) && !{}.hasOwnProperty.call(methods, key)) {\n            methods[key] = true;\n            iterator.call(context, proto[key], key, proto);\n          }\n        });\n        proto = Object.getPrototypeOf(proto);\n      }\n    }\n  };\n\n  /**\n  * This method allows a PubnubChannel to be inherited\n  * The methods passed into this function will be added onto the array's prototype.\n  /* They can override existing methods as well.\n\n  * @param {Object} methods a list of functions to add onto the prototype\n  * @returns {Function} the extended pubnubChannel object\n  * @static\n  */\n  PubnubChannel.$extend = function (methods) {\n    if (!angular.isObject(methods)) {\n      throw new Error('The methods parameter should be an object');\n    }\n\n    let ExtendedPubnubChannel = function (channel, config) {\n      if (!(this instanceof PubnubChannel)) {\n        return new ExtendedPubnubChannel(channel, config);\n      }\n      PubnubChannel.apply(this, arguments);\n      return this.$messages;\n    };\n\n    ExtendedPubnubChannel.prototype = Object.create(PubnubChannel.prototype);\n    angular.extend(ExtendedPubnubChannel.prototype, methods);\n\n    return ExtendedPubnubChannel;\n  };\n\n  return PubnubChannel;\n}]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/pubnub_channel.js","/* @flow */\n\nconst pubnubConfig = require('../config.common.json');\n/* global angular */\nangular.module('pubnub.angular.service')\n    .factory('$pubnubChannelGroup', ['$rootScope', '$q', 'Pubnub', '$pubnubChannel',\n      function ($rootScope, $q, Pubnub, $pubnubChannel) {\n      /**\n       * Constructor\n       * The constructor is called through this way $pubnubChannelGroup(channelGroup, options) and shoudld rarely called directely\n       * This object is a container of channels\n       * You can access to one of a channel by calling the #getChannel(channel) method\n       * Optionnal parameters available to pass in the config hash:\n       * {\n       *    instance: 'deluxeInstance',  // The instance that will be used, default: {default PubNub instance}\n       *    autosubscribe: true,         // Automatically subscribe to the channel group, default: true\n       *    presence: false              // If autosubscribe enabled, subscribe and trigger the presence events for the channel group, default: false\n       *    channelExtension: {foo: function(){ return \"bar\"}} // Define additionnal functions or override some for the channel instanciated\n       *\n       * }\n       * @param {String} channelGroup | {Hash} config\n       * @returns the channel group itself;\n       * @constructor\n       */\n        function PubnubChannelGroup(channelGroup, _config) {\n              // Instanciate the PubnubChannelGroup and return it\n          if (!(this instanceof PubnubChannelGroup)) {\n            return new PubnubChannelGroup(channelGroup, _config);\n          }\n\n          let self = this;\n          let config = _config || {};\n\n          if (!channelGroup) {\n            throw new Error('The channel group name is required');\n          }\n\n          // autosubscribe\n          if (config.autosubscribe && !(typeof config.autosubscribe === 'boolean')) {\n            throw new Error('The autosubscribe parameter should be a boolean');\n          }\n          // presence\n          if (config.presence && !(typeof config.presence === 'boolean')) {\n            throw new Error('The presence parameter should be a boolean');\n          }\n\n          if (config.channelExtension && !(angular.isObject(config.channelExtension))) {\n            throw new Error('The channelExtension should be an object');\n          }\n\n          this._channelGroup = channelGroup;\n          // Maintain the list of channel objects\n          this.$channels = {};\n          // PubNub Instance that will be used by this PubNub channel\n          this._pubnubInstance = config.instance ? Pubnub.getInstance(config.instance) : Pubnub.getInstance(pubnubConfig.default_instance_name);\n          // Subscribe and trigger the presence events\n          this._presence = config.presence == null ? false : config.presence;\n          // Indicates if it should automatically subscribe to the PubNub channel, default: true\n          this._autosubscribe = config.autosubscribe == null ? true : config.autosubscribe;\n          // Extensions for the channel beeing instanciated\n          this._extendedChannel = config.channelExtension ? $pubnubChannel.$extend(config.channelExtension) : null;\n          // The handler that allow to stop listening to new messages\n          this._unsubscribeHandler = null;\n\n          let eventsToTrigger = null;\n          if (Pubnub.getPubNubVersion() === '3') {\n            eventsToTrigger = ['callback', 'connect', 'reconnect', 'disconnect', 'error', 'idle'];\n          } else {\n            eventsToTrigger = ['status', 'message'];\n          }\n          // Trigger the presence event?\n          if (this._presence) {\n            eventsToTrigger.push('presence');\n          }\n          // Automatically subscribe to the channel\n          if (this._autosubscribe) {\n            // Automatically subscribe to the channel\n            let args = { triggerEvents: eventsToTrigger };\n            if (Pubnub.getPubNubVersion() === '3') {\n              args.channel_group = this._channelGroup;\n            } else {\n              args.channelGroups = [this._channelGroup];\n            }\n            this._pubnubInstance.subscribe(args);\n          }\n\n          // Allow to unsubscribe to the channel group\n          let eventName = Pubnub.getMessageEventNameFor(self._channelGroup, self._pubnubInstance.label);\n          this._unsubscribeHandler = $rootScope.$on(eventName, self.$$newMessage.bind(self));\n\n          return this;\n        }\n\n        PubnubChannelGroup.prototype = {\n          /**\n           * Return the channel object specified from the name\n           * the message can be from any channel of the channel group\n           * @protected\n           */\n          $channel(channel) {\n            if (!angular.isDefined(this.$channels[channel])) {\n              let options = {\n                instance: this._pubnubInstance.label,\n                autosubscribe: false,\n                presence: false,\n                autostore: true\n              };\n              let newChannel = this._extendedChannel ? new this._extendedChannel(channel, options) : $pubnubChannel(channel, options);\n              this.$channels[channel] = newChannel;\n            }\n\n            return this.$channels[channel];\n          },\n\n          /**\n           * Return the Pubnub instance associated to this PubNub Channel Group\n           * @returns {Pubnub} the Pubnub instance\n           */\n          $pubnubInstance() {\n            return this._pubnubInstance;\n          },\n\n          /**\n           * Return the channel name on which this PubnubChannelGroup is based\n           * @returns {String} the channel name\n           */\n          $channelGroup() {\n            return this._channelGroup;\n          },\n\n          /**\n           * Inform the object to not receive the events anymore\n           * and and clears memory being used by this array\n           */\n          $destroy() {\n            this._unsubscribeHandler();\n            Object.keys(this.$channels).forEach((channel) => {\n              if ({}.hasOwnProperty.call(this.$channels, channel)) {\n                delete this.$channels[channel];\n              }\n            });\n          },\n\n          /**\n           * Called when an new message has been received in the channel from the PubNub network\n           * the message can be from any channel of the channel group\n           * @protected\n           */\n          $$newMessage(ngEvent, message, env) {\n            let channel = null;\n            if (Pubnub.getPubNubVersion() === '3') {\n              channel = env[3];\n            } else {\n              channel = message.channel;\n            }\n            this.$channel(channel).$$newMessage(ngEvent, message, env);\n          }\n        };\n\n        return PubnubChannelGroup;\n      }\n    ]);\n\n\n\n// WEBPACK FOOTER //\n// ./src/pubnub_channel_group.js"],"sourceRoot":""}